# from .transform_function import *
# from cytosense_to_ecotaxa_pipeline.transform_function import *
try:
    # Essayer d'abord l'importation relative (fonctionne lors du développement)
    from .transform_function import remove_extension, extract_date_utc, extract_time_utc, extract_commit_version #,search_pulse_shapes
except ImportError:
    # Si ça échoue, essayer l'importation absolue (fonctionne après installation)
    from cytosense_to_ecotaxa_pipeline.transform_function import *

column_mapping = {
    "filename": { "name": "filename", "type": "[t]", "transform": remove_extension },
    "instrument.name": { "name": "instrument", "type": "[t]" },
    "instrument.serialNumber": { "name": "serialNumber", "type": "[t]" },
    "instrument.measurementSettings.CytoSettings.TabName": { "name": "TabName", "type": "[t]" },
    "instrument.measurementSettings.CytoSettings.SamplePompSpeed": { "name": "SamplePompSpeed", "type": "[f]", "transform": None },
    "instrument.measurementSettings.CytoSettings.LimitParticleRate": { "name": "LimitParticleRate", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    "instrument.measurementSettings.CytoSettings.TriggerLevel1e": { "name": "TriggerLevel1e", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.TriggerChannel": { "name": "TriggerChannel", "type": "[t]" },
    "instrument.measurementSettings.CytoSettings.StopafterTimertext": { "name": "StopafterTimertext", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.MaxNumberParticleText": { "name": "MaxNumberParticleText", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.StopAtParticles": { "name": "StopAtParticles", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    "instrument.measurementSettings.CytoSettings.StopAtParticlesString": { "name": "StopAtParticlesString", "type": "[t]" },
    "instrument.measurementSettings.CytoSettings.MaxAnalysedVolume": { "name": "MaxAnalysedVolume", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.StopAtAnalysedVolume": { "name": "StopAtAnalysedVolume", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    "instrument.measurementSettings.CytoSettings.StopAtAnalysedVolumeString": { "name": "StopAtAnalysedVolumeString", "type": "[t]" },
    "instrument.measurementSettings.CytoSettings.MaxPumpedVolume": { "name": "MaxPumpedVolume", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.StopAtPumpedVolume": { "name": "StopAtPumpedVolume", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    "instrument.measurementSettings.CytoSettings.StopAtPumpedVolumeString": { "name": "StopAtPumpedVolumeString", "type": "[t]" },
    "instrument.measurementSettings.CytoSettings.MaxNumberFotoText": { "name": "MaxNumberFotoText", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.StopAtFotos": { "name": "StopAtFotos", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    "instrument.measurementSettings.CytoSettings.StopAtFotosString": { "name": "StopAtFotosString", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.StopAfterTime": { "name": "StopAfterTime", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    "instrument.measurementSettings.CytoSettings.FlushCheck": { "name": "FlushCheck", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    "instrument.measurementSettings.CytoSettings.IIFCheck": { "name": "IIFCheck", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    "instrument.measurementSettings.CytoSettings.PMTlevels_str": { "name": "PMTlevels_str", "type": "[t]" },
    "instrument.measurementSettings.CytoSettings.PMTLevelPreset": { "name": "PMTLevelPreset", "type": "[t]" },
    "instrument.measurementSettings.CytoSettings.UserRemarks": { "name": "UserRemarks", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.SeperateConcentration": { "name": "SeperateConcentration", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    "instrument.measurementSettings.CytoSettings.MeasureNoiseLevels": { "name": "MeasureNoiseLevels", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    "instrument.measurementSettings.CytoSettings.CalibrateCamera": { "name": "CalibrateCamera", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    "instrument.measurementSettings.CytoSettings.IIFuseTargetAll": { "name": "IIFuseTargetAll", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    "instrument.measurementSettings.CytoSettings.IIFuseTargetRange": { "name": "IIFuseTargetRange", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    "instrument.measurementSettings.CytoSettings.IIFuseSmartGrid": { "name": "IIFuseSmartGrid", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    "instrument.measurementSettings.CytoSettings.SmartGrid_str": { "name": "SmartGrid_str", "type": "[t]" },
    "instrument.measurementSettings.CytoSettings.IifSmartGridChannelIds1": { "name": "IifSmartGridChannelIds1", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.IifSmartGridChannelIds2": { "name": "IifSmartGridChannelIds2", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.IIFRestrictFwsRange": { "name": "IIFRestrictFwsRange", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    "instrument.measurementSettings.CytoSettings.IIFFwsRatioMin": { "name": "IIFFwsRatioMin", "type": "[t]" },
    "instrument.measurementSettings.CytoSettings.IIFFwsRatioMax": { "name": "IIFFwsRatioMax", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.IIFPhotographLargeParticles": { "name": "IIFPhotographLargeParticles", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    "instrument.measurementSettings.CytoSettings.IIFUseSetDefintionSelector": { "name": "IIFUseSetDefintionSelector", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    "instrument.measurementSettings.CytoSettings.IIFSetDefintionFileName": { "name": "IIFSetDefintionFileName", "type": "[t]" },
    "instrument.measurementSettings.CytoSettings.IIFSetSelectionInfo.WantImages": { "name": "WantImages", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    "instrument.measurementSettings.CytoSettings.IIFSetSelectionInfo.NumberOfImages": { "name": "NumberOfImages", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.IIFRoiName": { "name": "IIFRoiName", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.HasExternalTrigger": { "name": "HasExternalTrigger", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.ExternalTriggerIsPulse": { "name": "ExternalTriggerIsPulse", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.ExternalTriggerFeedbackLed": { "name": "ExternalTriggerFeedbackLed", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.triggerlevelConstant": { "name": "triggerlevelConstant", "type": "[t]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.triggerlevelOffset": { "name": "triggerlevelOffset", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.CytoUSBSettings.release.ReleaseDate": { "name": "ReleaseDateDay", "type": "[t]", "transform": extract_date_utc },
    "instrument.measurementSettings.CytoSettings.CytoSettings.CytoUSBSettings.release.ReleaseDate*ReleaseDate": { "name": "ReleaseDateHour", "type": "[t]", "transform": extract_time_utc },
    "instrument.measurementSettings.CytoSettings.CytoSettings.CytoUSBSettings.CytoUSBVersion": { "name": "CytoUSBVersion", "type": "[t]", "transform": extract_commit_version },
    "instrument.measurementSettings.CytoSettings.CytoSettings.iif.Gain": { "name": "Gain", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.iif.Brightness": { "name": "Brightness", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.iif.ROITop": { "name": "ROITop", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.iif.ROILeft": { "name": "ROILeft", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.iif.ROIWidth": { "name": "ROIWidth", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.iif.ROIHeight": { "name": "ROIHeight", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.iif.HorizontalFlip": { "name": "HorizontalFlip", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.iif.VerticalFlip": { "name": "VerticalFlip", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.iif.Rotate": { "name": "Rotate", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.iif.Compression": { "name": "Compression", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.iif.TriggerPositive": { "name": "TriggerPositive", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.iif.CameraDelay": { "name": "CameraDelay", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.iif.CameraDelayOffset_us": { "name": "CameraDelayOffset_us", "type": "[f]" },
    # "instrument.measurementSettings.CytoSettings.CytoSettings.iif.Background.Data": { "name": "Data", "type": "[t]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.iif.ExposureTime": { "name": "ExposureTime", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.iif.framerate": { "name": "framerate", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.iif.Camera.CameraName": { "name": "CameraName", "type": "[t]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.iif.Camera.Description": { "name": "Description", "type": "[t]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.iif.Camera.FirmwareVersion": { "name": "FirmwareVersion", "type": "[t]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.iif.Camera.FpgaVersion": { "name": "FpgaVersion", "type": "[t]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.iif.Camera.LensDescription": { "name": "LensDescription", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.iif.Camera.ModelName": { "name": "ModelName", "type": "[t]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.iif.Camera.SerialNumber": { "name": "SerialNumber", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.iif.Camera.VendorName": { "name": "VendorName", "type": "[t]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.iif.dBGain": { "name": "dBGain", "type": "[f]", "transform": None },
    "instrument.measurementSettings.CytoSettings.CytoSettings.iif.opticalMagnification": { "name": "opticalMagnification", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.iif.FlashDurationCount": { "name": "FlashDurationCount", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.iif.ImageScaleMuPerPixelP": { "name": "ImageScaleMuPerPixelP", "type": "[t]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.iif.EnableOverrideMuPerPixel": { "name": "EnableOverrideMuPerPixel", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.iif.AllwaysTakeLargerParticlePictures": { "name": "AllwaysTakeLargerParticlePictures", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.EnableCompressIIFImages": { "name": "EnableCompressIIFImages", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.EnableSaveUnmatchedIIFFoto": { "name": "EnableSaveUnmatchedIIFFoto", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    # "instrument.measurementSettings.CytoSettings.CytoSettings.channels.IsFilteredLFChannel": { "name": "IsFilteredLFChannel", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    # "instrument.measurementSettings.CytoSettings.CytoSettings.channels.IsHFplusLFchannel": { "name": "IsHFplusLFchannel", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    # "instrument.measurementSettings.CytoSettings.CytoSettings.channels.LF_HardwareChannelIndex": { "name": "LF_HardwareChannelIndex", "type": "[f]" },
    # "instrument.measurementSettings.CytoSettings.CytoSettings.channels.HF_HardwareChannelIndex": { "name": "HF_HardwareChannelIndex", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.Laser1Model": { "name": "Laser1Model", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.SubLoopVolume_uL": { "name": "SubLoopVolume_uL", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.OpticalMagnification": { "name": "OpticalMagnification", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.ImagePixelSize": { "name": "ImagePixelSize", "type": "[t]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.CameraPixelSize": { "name": "CameraPixelSize", "type": "[t]" },
    "instrument.measurementSettings.CytoSettings.CytoSettings.ChannelList.ChannelInfo.LF_HardwareChannelIndex": { "name": "LF_HardwareChannelIndex", "type": "[f]" },
    "instrument.measurementSettings.CytoSettings.SmartTriggerSettingDescription": { "name": "SmartTriggerSettingDescription", "type": "[t]" },
    "instrument.measurementSettings.CytoSettings.SmartTriggeringEnabled": { "name": "SmartTriggeringEnabled", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    "instrument.measurementResults.maximum_measurement_time_s": { "name": "maximum_measurement_time_s", "type": "[f]" },
    "instrument.measurementResults.particleCount": { "name": "particleCount", "type": "[f]" },
    "instrument.measurementResults.particlesInFileCount": { "name": "particlesInFileCount", "type": "[f]" },
    "instrument.measurementResults.pictureCount": { "name": "pictureCount", "type": "[f]" },
    "instrument.measurementResults.pumped_volume": { "name": "pumped_volume", "type": "[f]" },
    "instrument.measurementResults.analysed_volume": { "name": "analysed_volume", "type": "[f]", "transform": None },
    "instrument.measurementResults.particleConcentration": { "name": "particleConcentration", "type": "[t]" },
    "particles.particleId": { "name": "particleId", "type": "[f]" },
    "particles.hasImage": { "name": "hasImage", "type": "[t]", "transform": lambda v: "true" if v else "false" },
    # "particles[].pulseShapes*FWS": {"name": "pulseShape_FWS","type": "[f]","transform":search_pulse_shapes("FWS")},
    # "particles[].pulseShapes*SWS": {"name": "pulseShape_Sidewards_Scatter","type": "[f]","transform":search_pulse_shapes("Sidewards Scatter")},
    # "particles[].pulseShapes*SWS": {"name": "pulseShape_SWS","type": "[f]","transform":search_pulse_shapes("Fl Yellow")},
    # "particles[].pulseShapes*Fl_Orange": {"name": "pulseShape_Fl_Orange","type": "[f]","transform":search_pulse_shapes("Fl Orange")},
    # "particles[].pulseShapes*Fl_Red": {"name": "pulseShape_Fl_Red","type": "[f]","transform":search_pulse_shapes("Fl Red")},
    # "particles[].pulseShapes*Curvature": {"name": "pulseShape_Curvature","type": "[f]","transform":search_pulse_shapes("Curvature")},
    # "particles[].pulseShapes*FWS_L": {"name": "pulseShape_Forward_Scatter_Left","type": "[f]","transform":search_pulse_shapes("Forward Scatter Left")},
    # "particles[].pulseShapes*FWS_R": {"name": "pulseShape_Forward_Scatter_Right","type": "[f]","transform":search_pulse_shapes("Forward Scatter Right")},

    # # "particles[].parameters.description*FWS": { "name": "description", "type": "[t]" },
    # "particles[].parameters.length*FWS": { "name": "FWS_length", "type": "[f]" },
    # "particles[].parameters.total*FWS": { "name": "FWS_total", "type": "[f]" },
    # "particles[].parameters.maximum*FWS": { "name": "FWS_maximum", "type": "[f]" },
    # "particles[].parameters.average*FWS": { "name": "FWS_average", "type": "[f]" },
    # "particles[].parameters.inertia*FWS": { "name": "FWS_inertia", "type": "[f]" },
    # "particles[].parameters.centreOfGravity*FWS": { "name": "FWS_centreOfGravity", "type": "[f]" },
    # "particles[].parameters.fillFactor*FWS": { "name": "FWS_fillFactor", "type": "[f]" },
    # "particles[].parameters.asymmetry*FWS": { "name": "FWS_asymmetry", "type": "[f]" },
    # "particles[].parameters.numberOfCells*FWS": { "name": "FWS_numberOfCells", "type": "[f]" },
    # "particles[].parameters.sampleLength*FWS": { "name": "FWS_sampleLength", "type": "[f]", "transform": None },
    # "particles[].parameters.timeOfArrival*FWS": { "name": "FWS_timeOfArrival", "type": "[f]" },
    # "particles[].parameters.first*FWS": { "name": "FWS_first", "type": "[f]", "transform": None },
    # "particles[].parameters.last*FWS": { "name": "FWS_last", "type": "[f]" },
    # "particles[].parameters.minimum*FWS": { "name": "FWS_minimum", "type": "[f]" },
    # "particles[].parameters.swscov*FWS": { "name": "FWS_swscov", "type": "[f]" },
    # "particles[].parameters.variableLength*FWS": { "name": "FWS_variableLength", "type": "[f]" },
    # # "particles[].parameters.description*SWS": { "name": "description", "type": "[t]" },
    # "particles[].parameters.length*SWS": { "name": "SWS_length", "type": "[f]" },
    # "particles[].parameters.total*SWS": { "name": "SWS_total", "type": "[f]", "transform": None },
    # "particles[].parameters.maximum*SWS": { "name": "SWS_maximum", "type": "[f]" },
    # "particles[].parameters.average*SWS": { "name": "SWS_average", "type": "[f]" },
    # "particles[].parameters.inertia*SWS": { "name": "SWS_inertia", "type": "[f]" },
    # "particles[].parameters.centreOfGravity*SWS": { "name": "SWS_centreOfGravity", "type": "[f]" },
    # "particles[].parameters.fillFactor*SWS": { "name": "SWS_fillFactor", "type": "[f]" },
    # "particles[].parameters.asymmetry*SWS": { "name": "SWS_asymmetry", "type": "[f]" },
    # "particles[].parameters.numberOfCells*SWS": { "name": "SWS_numberOfCells", "type": "[f]" },
    # "particles[].parameters.sampleLength*SWS": { "name": "SWS_sampleLength", "type": "[f]", "transform": None },
    # "particles[].parameters.timeOfArrival*SWS": { "name": "SWS_timeOfArrival", "type": "[f]" },
    # "particles[].parameters.first*SWS": { "name": "SWS_first", "type": "[f]" },
    # "particles[].parameters.last*SWS": { "name": "SWS_last", "type": "[f]" },
    # "particles[].parameters.minimum*SWS": { "name": "SWS_minimum", "type": "[f]" },
    # "particles[].parameters.swscov*SWS": { "name": "SWS_swscov", "type": "[f]", "transform": None},
    # "particles[].parameters.variableLength*SWS": { "name": "SWS_variableLength", "type": "[f]" },
    # # "particles[].parameters.description*Fl_Yellow": { "name": "description", "type": "[t]" },
    # "particles[].parameters.length*Fl_Yellow": { "name": "Fl_Yellow_length", "type": "[f]" },
    # "particles[].parameters.total*Fl_Yellow": { "name": "Fl_Yellow_total", "type": "[f]", "transform": None },
    # "particles[].parameters.maximum*Fl_Yellow": { "name": "Fl_Yellow_maximum", "type": "[f]" },
    # "particles[].parameters.average*Fl_Yellow": { "name": "Fl_Yellow_average", "type": "[f]" },
    # "particles[].parameters.inertia*Fl_Yellow": { "name": "Fl_Yellow_inertia", "type": "[f]" },
    # "particles[].parameters.centreOfGravity*Fl_Yellow": { "name": "Fl_Yellow_centreOfGravity", "type": "[f]" },
    # "particles[].parameters.fillFactor*Fl_Yellow": { "name": "Fl_Yellow_fillFactor", "type": "[f]" },
    # "particles[].parameters.asymmetry*Fl_Yellow": { "name": "Fl_Yellow_asymmetry", "type": "[f]" },
    # "particles[].parameters.numberOfCells*Fl_Yellow": { "name": "Fl_Yellow_numberOfCells", "type": "[f]" },
    # "particles[].parameters.sampleLength*Fl_Yellow": { "name": "Fl_Yellow_sampleLength", "type": "[f]", "transform": None },
    # "particles[].parameters.timeOfArrival*Fl_Yellow": { "name": "Fl_Yellow_timeOfArrival", "type": "[f]" },
    # "particles[].parameters.first*Fl_Yellow": { "name": "Fl_Yellow_first", "type": "[f]" },
    # "particles[].parameters.last*Fl_Yellow": { "name": "Fl_Yellow_last", "type": "[f]" },
    # "particles[].parameters.minimum*Fl_Yellow": { "name": "Fl_Yellow_minimum", "type": "[f]" },
    # "particles[].parameters.Fl_Yellowcov*Fl_Yellow": { "name": "Fl_Yellow_swscov", "type": "[f]", "transform": None},
    # "particles[].parameters.variableLength*Fl_Yellow": { "name": "Fl_Yellow_variableLength", "type": "[f]" },
    # # "particles[].parameters.description*Fl_Red": { "name": "description", "type": "[t]" },
    # "particles[].parameters.length*Fl_Red": { "name": "Fl_Red_length", "type": "[f]", "transform":search_pulse_shapes("Fl_Red")},
    # "particles[].parameters.total*Fl_Red": { "name": "Fl_Red_total", "type": "[d]", "transform":search_pulse_shapes("Fl_Red") },
    # "particles[].parameters.maximum*Fl_Red": { "name": "Fl_Red_maximum", "type": "[f]", "transform":search_pulse_shapes("Fl_Red") },
    # "particles[].parameters.average*Fl_Red": { "name": "Fl_Red_average", "type": "[f]", "transform":search_pulse_shapes("Fl_Red") },
    # "particles[].parameters.inertia*Fl_Red": { "name": "Fl_Red_inertia", "type": "[f]", "transform":search_pulse_shapes("Fl_Red") },
    # "particles[].parameters.centreOfGravity*Fl_Red": { "name": "Fl_Red_centreOfGravity", "type": "[f]", "transform":search_pulse_shapes("Fl_Red") },
    # "particles[].parameters.fillFactor*Fl_Red": { "name": "Fl_Red_fillFactor", "type": "[f]", "transform":search_pulse_shapes("Fl_Red") },
    # "particles[].parameters.asymmetry*Fl_Red": { "name": "Fl_Red_asymmetry", "type": "[f]", "transform":search_pulse_shapes("Fl_Red") },
    # "particles[].parameters.numberOfCells*Fl_Red": { "name": "Fl_Red_numberOfCells", "type": "[f]", "transform":search_pulse_shapes("Fl_Red") },
    # "particles[].parameters.sampleLength*Fl_Red": { "name": "Fl_Red_sampleLength", "type": "[f]", "transform":search_pulse_shapes("Fl_Red") },
    # "particles[].parameters.timeOfArrival*Fl_Red": { "name": "Fl_Red_timeOfArrival", "type": "[f]" },
    # "particles[].parameters.first*Fl_Red": { "name": "Fl_Red_first", "type": "[f]" },
    # "particles[].parameters.last*Fl_Red": { "name": "Fl_Red_last", "type": "[f]" },
    # "particles[].parameters.minimum*Fl_Red": { "name": "Fl_Red_minimum", "type": "[f]" },
    # "particles[].parameters.Fl_Redcov*Fl_Red": { "name": "Fl_Red_swscov", "type": "[d]", "transform": None},
    # "particles[].parameters.variableLength*Fl_Red": { "name": "Fl_Red_variableLength", "type": "[f]" },
    # # "particles[].parameters.description*Curvature": { "name": "description", "type": "[t]" },
    # "particles[].parameters.length*Curvature": { "name": "Curvature_length", "type": "[f]" },
    # "particles[].parameters.total*Curvature": { "name": "Curvature_total", "type": "[d]", "transform": None },
    # "particles[].parameters.maximum*Curvature": { "name": "Curvature_maximum", "type": "[f]" },
    # "particles[].parameters.average*Curvature": { "name": "Curvature_average", "type": "[f]" },
    # "particles[].parameters.inertia*Curvature": { "name": "Curvature_inertia", "type": "[f]" },
    # "particles[].parameters.centreOfGravity*Curvature": { "name": "Curvature_centreOfGravity", "type": "[f]" },
    # "particles[].parameters.fillFactor*Curvature": { "name": "Curvature_fillFactor", "type": "[f]" },
    # "particles[].parameters.asymmetry*Curvature": { "name": "Curvature_asymmetry", "type": "[f]" },
    # "particles[].parameters.numberOfCells*Curvature": { "name": "Curvature_numberOfCells", "type": "[f]" },
    # "particles[].parameters.sampleLength*Curvature": { "name": "Curvature_sampleLength", "type": "[f]", "transform": None },
    # "particles[].parameters.timeOfArrival*Curvature": { "name": "Curvature_timeOfArrival", "type": "[f]" },
    # "particles[].parameters.first*Curvature": { "name": "Curvature_first", "type": "[f]" },
    # "particles[].parameters.last*Curvature": { "name": "Curvature_last", "type": "[f]" },
    # "particles[].parameters.minimum*Curvature": { "name": "Curvature_minimum", "type": "[f]" },
    # "particles[].parameters.Curvaturecov*Curvature": { "name": "Curvature_swscov", "type": "[d]", "transform": None},
    # "particles[].parameters.variableLength*Curvature": { "name": "Curvature_variableLength", "type": "[f]" },
    # # "particles[].parameters.description*FWS_L": { "name": "description", "type": "[t]" },
    # "particles[].parameters.length*FWS_L": { "name": "FWS_L_length", "type": "[f]" },
    # "particles[].parameters.total*FWS_L": { "name": "FWS_L_total", "type": "[d]", "transform": None },
    # "particles[].parameters.maximum*FWS_L": { "name": "FWS_L_maximum", "type": "[f]" },
    # "particles[].parameters.average*FWS_L": { "name": "FWS_L_average", "type": "[f]" },
    # "particles[].parameters.inertia*FWS_L": { "name": "FWS_L_inertia", "type": "[f]" },
    # "particles[].parameters.centreOfGravity*FWS_L": { "name": "FWS_L_centreOfGravity", "type": "[f]" },
    # "particles[].parameters.fillFactor*FWS_L": { "name": "FWS_L_fillFactor", "type": "[f]" },
    # "particles[].parameters.asymmetry*FWS_L": { "name": "FWS_L_asymmetry", "type": "[f]" },
    # "particles[].parameters.numberOfCells*FWS_L": { "name": "FWS_L_numberOfCells", "type": "[f]" },
    # "particles[].parameters.sampleLength*FWS_L": { "name": "FWS_L_sampleLength", "type": "[f]", "transform": None },
    # "particles[].parameters.timeOfArrival*FWS_L": { "name": "FWS_L_timeOfArrival", "type": "[f]" },
    # "particles[].parameters.first*FWS_L": { "name": "FWS_L_first", "type": "[f]" },
    # "particles[].parameters.last*FWS_L": { "name": "FWS_L_last", "type": "[f]" },
    # "particles[].parameters.minimum*FWS_L": { "name": "FWS_L_minimum", "type": "[f]" },
    # "particles[].parameters.FWS_Lcov*FWS_L": { "name": "FWS_L_swscov", "type": "[d]", "transform": None},
    # "particles[].parameters.variableLength*FWS_L": { "name": "FWS_L_variableLength", "type": "[f]" },
    # # "particles[].parameters.description*FWS_R": { "name": "description", "type": "[t]" },
    # "particles[].parameters.length*FWS_R": { "name": "FWS_R_length", "type": "[f]" },
    # "particles[].parameters.total*FWS_R": { "name": "FWS_R_total", "type": "[d]", "transform": None },
    # "particles[].parameters.maximum*FWS_R": { "name": "FWS_R_maximum", "type": "[f]" },
    # "particles[].parameters.average*FWS_R": { "name": "FWS_R_average", "type": "[f]" },
    # "particles[].parameters.inertia*FWS_R": { "name": "FWS_R_inertia", "type": "[f]" },
    # "particles[].parameters.centreOfGravity*FWS_R": { "name": "FWS_R_centreOfGravity", "type": "[f]" },
    # "particles[].parameters.fillFactor*FWS_R": { "name": "FWS_R_fillFactor", "type": "[f]" },
    # "particles[].parameters.asymmetry*FWS_R": { "name": "FWS_R_asymmetry", "type": "[f]" },
    # "particles[].parameters.numberOfCells*FWS_R": { "name": "FWS_R_numberOfCells", "type": "[f]" },
    # "particles[].parameters.sampleLength*FWS_R": { "name": "FWS_R_sampleLength", "type": "[f]", "transform": None },
    # "particles[].parameters.timeOfArrival*FWS_R": { "name": "FWS_R_timeOfArrival", "type": "[f]" },
    # "particles[].parameters.first*FWS_R": { "name": "FWS_R_first", "type": "[f]" },
    # "particles[].parameters.last*FWS_R": { "name": "FWS_R_last", "type": "[f]" },
    # "particles[].parameters.minimum*FWS_R": { "name": "FWS_R_minimum", "type": "[f]" },
    # "particles[].parameters.swscov*FWS_R": { "name": "FWS_R_swscov", "type": "[d]", "transform": None},
    # "particles[].parameters.variableLength*FWS_R": { "name": "FWS_R_variableLength", "type": "[f]" },
}



"""List the parameters of the particles"""
particles_parameters = [
    "length",
    "total",
    "maximum",
    "average",
    "inertia",
    "centreOfGravity",
    "fillFactor",
    "asymmetry",
    "numberOfCells",
    "sampleLength",
    "timeOfArrival",
    "first",
    "last",
    "minimum",
    "swscov",
    "variableLength"
]

"""Channel parameters"""
channel_parameters = [
"hasLowCheck",
"lowcheck",
"lowcheckID",
"name",
"visible",
"highsensitivity",
"color",
"SyncPulseValue",
"hasI2CPMTLevel",
"CytoSenseOpticalUnitProperty",
"LaserColor",
"LaserColorName",
"DualFocus",
"PMTLevel_id",
"PMTLevel_min",
"PMTLevel_max",
"Channel_Type",
"Description",
"IsFilteredLFChannel",
"IsHFplusLFchannel",
"LF_HardwareChannelIndex",
"HF_HardwareChannelIndex"
]